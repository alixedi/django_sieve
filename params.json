{"name":"Django sieve","tagline":"Serve user-wise data beautifully, minimally and correctly.","body":"django\\_sieve\r\n=============\r\n\r\n[![PyPI package](https://badge.fury.io/py/django_sieve.png)](https://pypi.python.org/pypi/django_sieve/)\r\n[![Build](https://travis-ci.org/alixedi/django_sieve.png?branch=master)](https://travis-ci.org/alixedi/django_sieve)\r\n[![Downloads](https://pypip.in/d/django_sieve/badge.png)](https://crate.io/packages/django_sieve?version=latest)\r\n[![Coverage](https://coveralls.io/repos/alixedi/django_sieve/badge.png?branch=master)](https://coveralls.io/r/alixedi/django_sieve?branch=master)\r\n\r\nFor a lot of web applications - Blogs come to mind as a canonical example, the queryset needs to be filtered in the views based upon some business rules. For instance, in a Blog, a “Dashboard” view - allowing editing of posts, should only ever have posts written by the user who is currently logged-in.\r\n\r\nIn general, there is a need to filter data based on some business logic - universally! i.e. across each and every view. The ugly way of doing this would be to write queries substantiating the business logic in every single view. Sieve does the same job beautifully, minimally and correctly.\r\n\r\nInstallation\r\n------------\r\n\r\nWe are at the cheeseshop:\r\n\r\n    pip install django_sieve\r\n\r\nUsage\r\n-----\r\n\r\nTo use django\\_sieve in a project:\r\n\r\n1. Include it in INSTALLED\\_APPS in your settings file.\r\n\r\n2. Define a sieve model. A sieve model is the control for defining the filtering criteria of user data. For instance, in our example, we have a bookstore in which a user can subscribe to all the books from a particular author or all the books from a few publishers. In this case, his book list need to only contain books from the author and publishers that he has chosen. In order to do this, we define a sieve model like so:\r\n\r\n        class Sieve(models.Model):\r\n            group = models.ForeignKey('auth.Group')\r\n            publisher = models.ManyToManyField(Publisher)\r\n            author = models.ForeignKey(Author)\r\n\r\n3. Declare your project-wide sieve model in settings.py. For instance, if the sieve model is called Sieve and resides in the bookstore app:\r\n\r\n        SIEVE_MODEL = 'bookstore.Sieve'\r\n\r\n4. Use SieveManager as the ModelManager for all the models in your project that you want to filter based on the criteria defined in the sieve model:\r\n\r\n        class Author(models.Model):\r\n            first_name = models.CharField(max_length=30)\r\n            last_name = models.CharField(max_length=40)\r\n            email = models.EmailField()\r\n            objects = SieveManager()\r\n\r\n5. Use the sieve method to define your queryset in your views like so:\r\n\r\n        class BookView(ListView):\r\n            queryset = Book.objects.sieve(user=request.user)\r\n\r\nThat is all. Site-wide filtering of user data based on predefined criteria without having to write queries for all the views.\r\n\r\nPlease be wary of performance issues though - in our experience, django-sieve works for 90% cases especially when you need to bring everything up for a quick demo. However, as your site matures and the number of users increase, you may want to invest in profiling your views and hand-crafting these queries when and where required.","google":"UA-51375524-2","note":"Don't delete this file! It's used internally to help with page regeneration."}